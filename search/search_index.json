{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bienvenido a Aprendia Docs","text":"<p>Esta documentaci\u00f3n centraliza todos los recursos de nuestros proyectos educativos.</p> <ul> <li>Aprende sobre nuestros proyectos principales.</li> <li>Consulta gu\u00edas t\u00e9cnicas para colaborar.</li> </ul>"},{"location":"#proyectos-destacados","title":"\ud83d\ude80 Proyectos destacados","text":"<ul> <li>Alfabetizaci\u00f3n Interactiva</li> </ul> <p>\u2728 Esta documentaci\u00f3n est\u00e1 en constante actualizaci\u00f3n. \u00a1Contribuye y ay\u00fadanos a mejorar!</p>"},{"location":"guias/arquitectura-backend/","title":"Documento Maestro: Gu\u00eda del Equipo Backend","text":"<p>Este documento establece la arquitectura base y las convenciones para el desarrollo de microservicios en nuestro ecosistema. El objetivo es proporcionar una gu\u00eda limpia, pragm\u00e1tica y agn\u00f3stica al lenguaje que garantice coherencia, mantenibilidad y escalabilidad en todos nuestros servicios. Nos enfocamos en una arquitectura RESTful inicial, con una visi\u00f3n clara hacia la futura integraci\u00f3n de sistemas basados en eventos.</p> <p>Adoptamos principios clave de Domain-Driven Design (DDD) y Screaming Architecture, organizando el c\u00f3digo de manera intuitiva por funcionalidades (features) y capas.</p>"},{"location":"guias/arquitectura-backend/#1-principios-arquitectonicos-clave","title":"1. Principios Arquitect\u00f3nicos Clave","text":"<ul> <li>Clean Architecture &amp; DDD: La l\u00f3gica de negocio (dominio) es el coraz\u00f3n y es independiente de tecnolog\u00edas externas (frameworks, bases de datos, sistemas de mensajer\u00eda). El dominio \"grita\" sus capacidades.</li> <li>Screaming Architecture: La estructura del c\u00f3digo debe reflejar el dominio del negocio, no las tecnolog\u00edas o frameworks. Una mirada r\u00e1pida a la estructura de carpetas debe indicar qu\u00e9 hace el sistema.</li> <li>Separaci\u00f3n de Preocupaciones (SoC): Cada capa y componente tiene una \u00fanica responsabilidad bien definida.</li> <li>Independencia del Lenguaje: Las ideas y patrones aqu\u00ed descritos son aplicables en Java, TypeScript, Python y otros lenguajes orientados a objetos.</li> <li>M\u00ednimo Over-engineering: Buscamos soluciones directas y efectivas, evitando complejidades innecesarias que no aporten valor inmediato.</li> <li>Orientaci\u00f3n a la Testeabilidad: La separaci\u00f3n de capas facilita las pruebas unitarias y de integraci\u00f3n de cada componente de forma aislada.</li> </ul>"},{"location":"guias/arquitectura-backend/#2-estructura-general-del-microservicio","title":"2. Estructura General del Microservicio","text":"<p>Todo microservicio seguir\u00e1 una estructura de carpetas que refleje sus features (funcionalidades de negocio) y capas internas.</p> <pre><code>.\n\u251c\u2500\u2500 src/                            # Carpeta ra\u00edz del c\u00f3digo fuente\n\u2502   \u251c\u2500\u2500 app/                        # C\u00f3digo principal de la aplicaci\u00f3n (Java/TypeScript/Python)\n\u2502   \u2502   \u251c\u2500\u2500 &lt;nombre-servicio&gt;/      # Namespace o paquete ra\u00edz del microservicio\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 application/        # Orquestaci\u00f3n de dependencias (DI)\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 core/               # Componentes fundamentales y transversales\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 features/           # M\u00f3dulos de funcionalidad (Screaming Architecture por feature)\n\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 &lt;feature-name&gt;/ # Ej: users, products, orders\n\u2502   \u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 controllers/    # Entrada HTTP (REST)\n\u2502   \u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 services/       # Aplicaci\u00f3n de casos de uso (orquesta dominio y data)\n\u2502   \u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 domain/         # L\u00f3gica de negocio, entidades, CASOS DE USO, interfaces de repositorio\n\u2502   \u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 data/           # Implementaciones de repositorios, DTOs, adaptadores\n\u2502   \u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 transports/     # Futura migraci\u00f3n a eventos/colas\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 common/             # Componentes comunes entre features (si aplica)\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 utils/              # Funciones auxiliares/comunes\n\u2502   \u2502   \u2514\u2500\u2500 MainApplication.java    # Punto de entrada (o main.ts, main.py)\n\u2502   \u251c\u2500\u2500 resources/                  # Archivos de configuraci\u00f3n, plantillas, etc. (Java)\n\u2502   \u2502   \u2514\u2500\u2500 application.properties.example / .env.example\n\u2502   \u2514\u2500\u2500 test/                       # C\u00f3digo de pruebas\n\u251c\u2500\u2500 Dockerfile.dev                  # Dockerfile para entorno de desarrollo\n\u251c\u2500\u2500 Dockerfile.prod                 # Dockerfile para entorno de producci\u00f3n\n\u251c\u2500\u2500 README.md                       # Documentaci\u00f3n del servicio\n\u251c\u2500\u2500 swagger.yaml / openapi.yaml     # Documentaci\u00f3n Swagger/OpenAPI\n\u2514\u2500\u2500 pom.xml / package.json / requirements.txt # Dependencias y configuraci\u00f3n del proyecto\n</code></pre>"},{"location":"guias/arquitectura-backend/#3-descripcion-de-capas-minimas-necesarias","title":"3. Descripci\u00f3n de Capas M\u00ednimas Necesarias","text":""},{"location":"guias/arquitectura-backend/#31-capa-core","title":"3.1. Capa <code>core</code>","text":"<p>Componentes fundamentales y transversales, independientes de la l\u00f3gica de negocio. Es la base de la aplicaci\u00f3n.</p> <ul> <li> <p>Prop\u00f3sito: Proporcionar infraestructura b\u00e1sica y gen\u00e9rica que otras capas necesitan.</p> </li> <li> <p>Contiene:</p> <ul> <li>Configuraciones Globales: Par\u00e1metros de aplicaci\u00f3n, variables de entorno.</li> <li>Middlewares/Interceptors: L\u00f3gica transversal para solicitudes/respuestas (ej. autenticaci\u00f3n JWT, correlaci\u00f3n de logs).</li> <li>Manejo de Excepciones: Clases base de excepciones personalizadas para errores gen\u00e9ricos (<code>AppException</code>, <code>ValidationException</code>, <code>NotFoundException</code>).</li> <li>Logging: Configuraci\u00f3n centralizada del sistema de logging.</li> </ul> </li> <li> <p>Dependencias: No debe depender de ninguna otra capa espec\u00edfica de negocio (<code>features</code>). Puede ser utilizada por cualquiera.</p> </li> </ul>"},{"location":"guias/arquitectura-backend/#32-capa-utils","title":"3.2. Capa <code>utils</code>","text":"<p>Funciones auxiliares o comunes que no encajan en ninguna otra capa espec\u00edfica.</p> <ul> <li> <p>Prop\u00f3sito: Contener utilidades gen\u00e9ricas y reutilizables.</p> </li> <li> <p>Contiene: Funciones de ayuda para fechas, cadenas, criptograf\u00eda, etc.</p> </li> <li> <p>Dependencias: Debe ser lo m\u00e1s independiente posible.</p> </li> </ul>"},{"location":"guias/arquitectura-backend/#33-capa-application","title":"3.3. Capa <code>application</code>","text":"<p>Punto central para la inyecci\u00f3n de dependencias y la orquestaci\u00f3n inicial de los servicios.</p> <ul> <li> <p>Prop\u00f3sito: Configurar y proporcionar las instancias concretas de los servicios (<code>features/&lt;feature&gt;/services</code>) y sus dependencias (interfaces de repositorio de <code>features/&lt;feature&gt;/domain</code>) a la capa de entrada (<code>controllers</code>). Cumple con el Principio de Inversi\u00f3n de Dependencias (DIP) de SOLID.</p> </li> <li> <p>Contiene: M\u00f3dulos de configuraci\u00f3n de inyecci\u00f3n de dependencias (ej. m\u00f3dulos de Spring, contenedores de inyecci\u00f3n en TypeScript/Python).</p> </li> </ul> <p>Dependencias: Depende de las interfaces definidas en <code>features/&lt;feature&gt;/domain</code> y de las implementaciones de los servicios en <code>features/&lt;feature&gt;/services</code>.</p>"},{"location":"guias/arquitectura-backend/#34-capa-featuresfeature","title":"3.4. Capa <code>features/&lt;feature&gt;</code>","text":"<p>Cada <code>feature</code> es un m\u00f3dulo de negocio independiente, encapsulando una funcionalidad completa.</p>"},{"location":"guias/arquitectura-backend/#341-featuresfeaturecontrollers","title":"3.4.1. <code>features/&lt;feature&gt;/controllers</code>","text":"<p>Punto de entrada de las solicitudes HTTP (REST).</p> <ul> <li> <p>Prop\u00f3sito: Recibir solicitudes externas, delegar la ejecuci\u00f3n de casos de uso (a services) y formatear la respuesta.</p> </li> <li> <p>Contiene: Endpoints REST</p> </li> <li> <p>Dependencias: Depende de services y dtos. No debe contener l\u00f3gica de negocio directa.</p> </li> </ul>"},{"location":"guias/arquitectura-backend/#342-featuresfeatureservices","title":"3.4.2. <code>features/&lt;feature&gt;/services</code>","text":"<p>Aplicaci\u00f3n de casos de uso de negocio</p> <ul> <li> <p>Prop\u00f3sito: Orquestar el flujo de un caso de uso. Recibe la petici\u00f3n del Controller, invoca el Caso de Uso correspondiente de la capa de <code>domain</code>, y maneja la respuesta o las excepciones que este propague. Si es necesario, transformar\u00e1 el resultado del dominio a un DTO de respuesta.</p> </li> <li> <p>Contiene: M\u00e9todos que representan la orquestaci\u00f3n de casos de uso de negocio (ej. <code>createUser</code>, <code>processOrder</code>).</p> </li> <li> <p>Dependencias: Depende de <code>features/&lt;feature&gt;/domain</code> (casos de uso, entidades, excepciones) y <code>features/&lt;feature&gt;/data</code> (para DTOs de respuesta).</p> </li> </ul>"},{"location":"guias/arquitectura-backend/#343-capa-featuresfeaturedomain","title":"3.4.3. Capa <code>features/&lt;feature&gt;/domain</code>","text":"<p>El coraz\u00f3n de la l\u00f3gica de negocio. Es completamente independiente de la tecnolog\u00eda.</p> <ul> <li> <p>Prop\u00f3sito: Contener las reglas de negocio, entidades, objetos de valor y Casos de Uso puros, as\u00ed como las interfaces para interactuar con datos.</p> </li> <li> <p>Contiene:</p> <ul> <li> <p>Entidades: Representan los conceptos clave del negocio con su comportamiento y estado (ej. <code>User</code>, <code>Product</code>).</p> </li> <li> <p>Objetos de Valor (Value Objects): Objetos inmutables que representan un valor descriptivo (ej. <code>EmailAddress</code>).</p> </li> <li> <p>Casos de Uso (Use Cases): Clases o funciones que encapsulan una operaci\u00f3n de negocio espec\u00edfica y at\u00f3mica (ej. <code>CreateUserUseCase</code>, <code>UpdateProductUseCase</code>). Operan sobre entidades y utilizan las interfaces de repositorio definidas en esta misma capa.</p> </li> <li> <p>Interfaces de Repositorio: Contratos (interfaces) que definen c\u00f3mo se accede y se persiste la informaci\u00f3n del dominio (ej. <code>UserRepository</code>).</p> </li> <li> <p>Excepciones de Dominio: Clases para representar errores de negocio espec\u00edficos (ej. <code>UserAlreadyExistsException</code>, <code>ProductNotFoundException</code>).</p> </li> </ul> </li> <li> <p>Dependencias: No debe depender de ninguna otra capa de la <code>feature</code> (<code>data</code>, <code>services</code>, <code>controllers</code>). Puede depender de <code>core/errors</code> para fallos gen\u00e9ricos.</p> </li> </ul>"},{"location":"guias/arquitectura-backend/#344-capa-featuresfeaturedata","title":"3.4.4. Capa <code>features/&lt;feature&gt;/data</code>","text":"<p>Implementaciones de acceso a la base de datos y otros sistemas externos.</p> <ul> <li> <p>Prop\u00f3sito: Implementar las interfaces de repositorio definidas en <code>features/&lt;feature&gt;/domain</code>. Se encarga de la interacci\u00f3n con la base de datos, cach\u00e9, o llamadas a otros servicios externos, y del mapeo entre DTOs y entidades de dominio.</p> </li> <li> <p>Contiene:</p> <ul> <li> <p>Implementaciones de Repositorios: Clases concretas que implementan las interfaces de repositorio (ej. <code>PostgreUserRepository</code>, <code>RedisProductRepository</code>).</p> </li> <li> <p>DTOs: Data Transfer Objects (DTOs) para la transferencia de datos con fuentes externas (APIs, BD). Se crear\u00e1n manualmente con m\u00e9todos de serializaci\u00f3n/deserializaci\u00f3n y mapeo.</p> </li> <li> <p>Adaptadores/Mapeadores: L\u00f3gica para mapear entre los DTOs de esta capa y las Entidades de Dominio.</p> </li> </ul> </li> <li> <p>Dependencias: Depende de <code>features/&lt;feature&gt;/domain</code> (entidades, interfaces de repositorio) y puede usar utilidades de <code>core</code> (ej. conexi\u00f3n a base de datos, configuraci\u00f3n de Dio).</p> </li> </ul>"},{"location":"guias/arquitectura-backend/#345-transports","title":"3.4.5. transports","text":"<p>Mecanismos de comunicaci\u00f3n futuros para eventos o colas.</p> <ul> <li> <p>Prop\u00f3sito: Abstraer los detalles de la comunicaci\u00f3n as\u00edncrona. Esta capa se mantendr\u00e1 vac\u00eda inicialmente para los microservicios RESTful puros, pero sirve como un placeholder para una futura migraci\u00f3n a eventos/colas (ej. Kafka, RabbitMQ).</p> </li> <li> <p>Contiene: Interfaces o clases para publicar/suscribir eventos.</p> </li> </ul> <p>Dependencias: Deber\u00eda depender solo de <code>features/&lt;feature&gt;/domain</code> (para publicar eventos de dominio) y de <code>core</code> (para la configuraci\u00f3n del bus de mensajes).</p>"},{"location":"guias/arquitectura-backend/#4-flujo-de-comunicacion-tipico-restful","title":"4. Flujo de Comunicaci\u00f3n T\u00edpico (RESTful)","text":"<ol> <li> <p>Solicitud HTTP Externa: Llega al Controller (<code>features/&lt;feature&gt;/controllers</code>).</p> </li> <li> <p>Controller:</p> <ul> <li> <p>Valida el DTO de entrada (<code>features/&lt;feature&gt;/data/dtos</code>).</p> </li> <li> <p>Si la validaci\u00f3n falla, responde inmediatamente con un c\u00f3digo de estado <code>400 Bad Request</code> y un cuerpo de error detallado.</p> </li> <li> <p>Invoca el m\u00e9todo apropiado en la capa de Services (<code>features/&lt;feature&gt;/services</code>), pas\u00e1ndole DTOs de entrada o datos b\u00e1sicos.</p> </li> </ul> </li> <li> <p>Service:</p> <ul> <li> <p>Recibe la llamada del Controller.</p> </li> <li> <p>Invoca el Caso de Uso de la capa de Dominio (<code>features/&lt;feature&gt;/domain/use_cases</code>).</p> </li> <li> <p>Si un caso de uso propaga una Excepci\u00f3n de Dominio (ej. <code>UserNotFoundException</code>) o un <code>Failure</code> de <code>core</code> (ej. <code>ServerFailure</code>), el Service la maneja y la propaga adecuadamente (o la convierte si es necesario, aunque generalmente se relanza).</p> </li> <li> <p>Transforma el resultado del caso de uso en un DTO de respuesta si es necesario para el Controller.</p> </li> </ul> </li> <li> <p>Caso de Uso (Domain):</p> <ul> <li> <p>Ejecuta la l\u00f3gica de negocio pura.</p> </li> <li> <p>Interact\u00faa con Entidades del Dominio (<code>features/&lt;feature&gt;/domain/entities</code>) para aplicar reglas de negocio.</p> </li> <li> <p>Utiliza las interfaces de Repositorio (<code>features/&lt;feature&gt;/domain/repositories</code>) para la persistencia o recuperaci\u00f3n de datos.</p> </li> </ul> </li> <li> <p>Repository (Implementaci\u00f3n en Data):</p> <ul> <li> <p>Traduce la solicitud de la interfaz de Repositorio (del Dominio) a operaciones de bajo nivel (ej. consultas SQL, llamadas a APIs externas).</p> </li> <li> <p>Utiliza los DTOs de <code>features/&lt;feature&gt;/data/dtos</code> para el transporte y mapeo de la respuesta de la fuente de datos a Entidades de Dominio (usando adaptadores/mapeadores).</p> </li> <li> <p>Si ocurre un error t\u00e9cnico (ej. conexi\u00f3n a DB fallida, API externa responde 500), lanza un <code>Failure</code> de <code>core</code>.</p> </li> </ul> </li> <li> <p>Dominio: Las Entidades y la l\u00f3gica de negocio aplican transformaciones o validaciones internas.</p> </li> <li> <p>Retorno de Datos: El resultado, a menudo una Entidad de Dominio, es devuelto al Caso de Uso, luego al Service, y finalmente al Controller.</p> </li> <li> <p>Controller: Env\u00eda el DTO de respuesta como respuesta HTTP.</p> </li> </ol>"},{"location":"guias/arquitectura-backend/#5-componentes-obligatorios-del-microservicio","title":"5. Componentes Obligatorios del Microservicio","text":"<p>Todo microservicio desplegado en nuestro ecosistema debe incluir los siguientes artefactos y configuraciones:</p>"},{"location":"guias/arquitectura-backend/#51-dockerfile-funcional-dockerfiledev-dockerfileprod","title":"5.1. Dockerfile Funcional (<code>Dockerfile.dev, Dockerfile.prod</code>)","text":"<ul> <li> <p>Prop\u00f3sito: Estandarizar la construcci\u00f3n y el despliegue de los servicios.</p> </li> <li> <p><code>Dockerfile.dev</code>: Optimizado para desarrollo (instalaci\u00f3n de herramientas de depuraci\u00f3n, hot-reloading, vol\u00famenes montados).</p> </li> <li> <p><code>Dockerfile.prod</code>: Optimizado para producci\u00f3n (im\u00e1genes ligeras, minimizaci\u00f3n de capas, ejecuci\u00f3n de la aplicaci\u00f3n compilada/bundle).</p> </li> </ul>"},{"location":"guias/arquitectura-backend/#52-archivo-de-configuracion-de-entorno","title":"5.2. Archivo de Configuraci\u00f3n de Entorno","text":"<ul> <li> <p>Prop\u00f3sito: Gestionar configuraciones sensibles o espec\u00edficas del entorno (credenciales de DB, claves API, puertos).</p> </li> <li> <p>Formato:</p> <ul> <li> <p><code>.env.example</code> (para TypeScript/Python).</p> </li> <li> <p><code>application.properties.example</code> (para Java).</p> </li> </ul> </li> <li> <p>Contenido: Debe listar todas las variables de entorno esperadas con valores de ejemplo o predeterminados.</p> </li> </ul>"},{"location":"guias/arquitectura-backend/#53-documentacion-swaggeropenapi","title":"5.3. Documentaci\u00f3n Swagger/OpenAPI","text":"<ul> <li> <p>Prop\u00f3sito: Describir las APIs REST del microservicio de manera estandarizada y legible por m\u00e1quinas y humanos.</p> </li> <li> <p>Herramienta: Usar anotaciones en el c\u00f3digo (Springdoc, Express-Swagger, FastAPI) o definir un archivo <code>swagger.yaml/openapi.yaml</code> manualmente si el lenguaje no ofrece buen soporte.</p> </li> <li> <p>Integraci\u00f3n: Deber\u00eda ser accesible a trav\u00e9s de una URL <code>/docs</code> o similar en el entorno de desarrollo.</p> </li> </ul>"},{"location":"guias/arquitectura-backend/#54-readmemd-completo","title":"5.4. README.md Completo","text":"<ul> <li> <p>Prop\u00f3sito: Proporcionar una gu\u00eda r\u00e1pida y completa para cualquier desarrollador que se una al proyecto.</p> </li> <li> <p>Contenido M\u00ednimo:</p> <ul> <li> <p>Descripci\u00f3n del microservicio y su dominio de negocio.</p> </li> <li> <p>Prerrequisitos (versiones de lenguaje, Docker, etc.).</p> </li> <li> <p>Pasos para ejecutar el servicio localmente (modo desarrollo y producci\u00f3n).</p> </li> <li> <p>Comandos de pruebas.</p> </li> <li> <p>Instrucciones para generar la documentaci\u00f3n Swagger/OpenAPI.</p> </li> </ul> </li> </ul>"},{"location":"guias/arquitectura-backend/#55-punto-de-entrada-bien-definido","title":"5.5. Punto de Entrada Bien Definido","text":"<ul> <li> <p>Prop\u00f3sito: Clara demarcaci\u00f3n del inicio de la aplicaci\u00f3n.</p> </li> <li> <p>Formato:</p> <ul> <li> <p><code>MainApplication.java</code> (Java)</p> </li> <li> <p><code>main.ts</code> (TypeScript)</p> </li> <li> <p><code>main.py</code> (Python)</p> </li> </ul> </li> <li> <p>Responsabilidad: Inicializar el contexto de la aplicaci\u00f3n, cargar configuraciones y arrancar el servidor.</p> </li> </ul>"},{"location":"guias/arquitectura-backend/#56-control-centralizado-de-errores-y-status-http","title":"5.6. Control Centralizado de Errores y Status HTTP","text":"<ul> <li> <p>Prop\u00f3sito: Gestionar y estandarizar la forma en que los errores son capturados, procesados y respondidos a los clientes HTTP.</p> </li> <li> <p>Implementaci\u00f3n: Utilizar interceptores, filtros o aspectos globales (ej. <code>@ControllerAdvice</code> en Spring, <code>@Catch</code> en NestJS, <code>ExceptionHandlers</code> en FastAPI).</p> </li> <li> <p>Mapeo de Excepciones a Status HTTP:</p> <ul> <li> <p>Errores de Negocio (Excepciones de Dominio): Deben mapearse a c\u00f3digos de estado HTTP sem\u00e1nticamente correctos, reflejando el problema de negocio.</p> <ul> <li> <p><code>400 Bad Request</code>: Para errores de validaci\u00f3n de entrada o reglas de negocio que no pueden cumplirse debido a datos incorrectos (ej. <code>InvalidCredentialsException</code>, <code>UserAlreadyExistsException</code> al intentar registrar un usuario existente).</p> </li> <li> <p><code>401 Unauthorized</code>: Para fallos de autenticaci\u00f3n (ej. token inv\u00e1lido o ausente).</p> </li> <li> <p><code>403 Forbidden</code>: Para fallos de autorizaci\u00f3n (ej. el usuario no tiene permisos para realizar la acci\u00f3n).</p> </li> <li> <p><code>404 Not Found</code>: Cuando un recurso solicitado no existe (ej. <code>ProductNotFoundException</code>).</p> </li> <li> <p><code>409 Conflict</code>: Cuando hay un conflicto con el estado actual del recurso (ej. intentar actualizar un recurso obsoleto).</p> </li> <li> <p><code>422 Unprocessable Entity</code>: Para errores de validaci\u00f3n sem\u00e1ntica o de reglas de negocio que impiden el procesamiento de la entidad (m\u00e1s espec\u00edfico que 400).</p> </li> </ul> </li> <li> <p>Errores T\u00e9cnicos (<code>Failure</code> de <code>core</code>): Deben mapearse a c\u00f3digos de estado HTTP que indiquen problemas del servidor o de la infraestructura.</p> <ul> <li> <p><code>500 Internal Server Error</code>: Para errores no esperados en el servidor, fallos de l\u00f3gica internos o excepciones no controladas.</p> </li> <li> <p><code>502 Bad Gateway</code>: Problemas de comunicaci\u00f3n con un servicio ascendente.</p> </li> <li> <p><code>503 Service Unavailable</code>: El servicio no est\u00e1 disponible temporalmente.</p> </li> <li> <p><code>504 Gateway Timeout</code>: El servicio no recibi\u00f3 una respuesta a tiempo de un servicio ascendente.</p> </li> </ul> </li> <li> <p>Cuerpo de la Respuesta de Error: La respuesta debe incluir un cuerpo JSON estandarizado con al menos:</p> <ul> <li> <p><code>code</code>: Un c\u00f3digo de error interno (opcional, pero \u00fatil para depuraci\u00f3n).</p> </li> <li> <p><code>message</code>: Una descripci\u00f3n legible para el cliente.</p> </li> <li> <p><code>details</code>: (Opcional) Un array o mapa con detalles adicionales sobre el error (ej. errores de validaci\u00f3n de campos espec\u00edficos).</p> </li> </ul> </li> <li> <p>Logging: Todo error manejado debe ser registrado adecuadamente</p> </li> </ul> </li> </ul>"},{"location":"guias/arquitectura-backend/#57-sistema-de-logging-estructurado","title":"5.7. Sistema de Logging Estructurado","text":"<ul> <li> <p>Prop\u00f3sito: Facilitar la depuraci\u00f3n, monitoreo y an\u00e1lisis de la operaci\u00f3n del servicio.</p> </li> <li> <p>Caracter\u00edsticas:</p> <ul> <li> <p>Logging Estructurado (JSON): Preferir formatos JSON para facilitar el an\u00e1lisis por herramientas externas.</p> </li> <li> <p>Niveles de Log: Usar niveles apropiados (DEBUG, INFO, WARN, ERROR).</p> </li> <li> <p>Contexto: Incluir ID de usuario, feature involucrada..</p> </li> </ul> </li> </ul>"},{"location":"guias/arquitectura-backend/#6-directrices-adicionales","title":"6. Directrices Adicionales","text":"<ul> <li>Inmutabilidad: Preferir la inmutabilidad para Entidades y DTOs.</li> <li>Validaci\u00f3n de Entrada: Validaci\u00f3n robusta de todos los DTOs de entrada.</li> <li> <p>Nomenclatura Consistente: Seguir convenciones de nombres claras para clases, m\u00e9todos y variables (ej. <code>camelCase</code> para m\u00e9todos, <code>PascalCase</code> para clases).</p> </li> <li> <p>Pruebas Unitarias e Integraci\u00f3n: Fomentar una cobertura de pruebas en todas las capas, especialmente en <code>domain</code> y <code>services</code>.</p> </li> </ul>"},{"location":"guias/arquitectura-mobile/","title":"Gu\u00eda de Arquitectura para Frontend Mobile (Flutter)","text":"<p>Este documento es una gu\u00eda t\u00e9cnica esencial para desarrolladores que se unen o colaboran en nuestro proyecto frontend en Flutter. Detalla la arquitectura, las convenciones de c\u00f3digo y las buenas pr\u00e1cticas que seguimos para asegurar una integraci\u00f3n fluida y un desarrollo coherente, mantenible y escalable.</p> <p>Nuestra arquitectura se basa en una combinaci\u00f3n estricta de Clean Architecture y Domain-Driven Design (DDD), con una organizaci\u00f3n modular que sigue los principios de Screaming Architecture dentro de las funcionalidades (features).</p>"},{"location":"guias/arquitectura-mobile/#1-estructura-del-proyecto-y-capas","title":"1. Estructura del Proyecto y Capas","text":"<p>El proyecto est\u00e1 organizado en capas de alto nivel y, dentro de estas, en m\u00f3dulos de funcionalidad. Las dependencias siempre fluyen hacia el centro, manteniendo el desacoplamiento y cumpliendo con el Principio de Inversi\u00f3n de Dependencias (DIP) de SOLID.</p> <pre><code>.\n\u251c\u2500\u2500 lib\n\u2502   \u251c\u2500\u2500 core                    # Componentes fundamentales y transversales\n\u2502   \u251c\u2500\u2500 shared                  # Widgets y utilidades reutilizables\n\u2502   \u251c\u2500\u2500 features                # M\u00f3dulos de funcionalidad (Screaming Architecture por feature)\n\u2502   \u2502   \u251c\u2500\u2500 auth                # Ejemplo de Feature: Autenticaci\u00f3n\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 application     # Inyecci\u00f3n de dependencias para esta feature\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 domain          # L\u00f3gica de negocio, Casos de Uso, Entidades, Repositorios (Interfaces)\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 data            # Implementaciones de repositorios (fuentes de datos), DTOs, Adaptadores\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 presentation    # Vistas, Widgets y View Models\n\u2502   \u2502   \u2514\u2500\u2500 ... otros features\n\u2502   \u2514\u2500\u2500 main.dart               # Punto de entrada de la aplicaci\u00f3n\n\u251c\u2500\u2500 pubspec.yaml\n\u251c\u2500\u2500 analysis_options.yaml\n\u2514\u2500\u2500 ...\n</code></pre>"},{"location":"guias/arquitectura-mobile/#11-capa-core-libcore","title":"1.1. Capa core (<code>/lib/core</code>)","text":"<p>Contiene componentes fundamentales y transversales, independientes de la l\u00f3gica de negocio y de la UI.</p> <ul> <li>Prop\u00f3sito: Proporcionar la infraestructura b\u00e1sica y gen\u00e9rica que otras capas necesitan.</li> <li> <p>Contiene:</p> <ul> <li><code>/config</code>: Configuraciones de entorno, constantes globales.</li> <li><code>/errors</code>: Clases base para <code>Failures</code> y excepciones a nivel de aplicaci\u00f3n (ej. <code>ServerFailure</code>, <code>NetworkFailure</code>).</li> <li><code>/network</code>: Configuraci\u00f3n global de Dio  (<code>dio_config.dart</code>), interceptores gen\u00e9ricos.</li> <li><code>/utils</code>: Utilidades gen\u00e9ricas (ej. <code>logger.dart</code>).</li> </ul> </li> <li> <p>Convenciones:</p> <ul> <li>No debe depender de ninguna otra capa de negocio (<code>features</code>, <code>shared</code>). Puede ser utilizada por cualquiera.</li> </ul> </li> </ul>"},{"location":"guias/arquitectura-mobile/#12-capa-shared-libshared","title":"1.2. Capa shared (<code>/lib/shared</code>)","text":"<p>Componentes reutilizables comunes a trav\u00e9s de m\u00faltiples <code>features</code>, m\u00e1s cercanos a la presentaci\u00f3n o utilidades de UI.</p> <ul> <li> <p>Prop\u00f3sito: Centralizar c\u00f3digo com\u00fan para evitar duplicaci\u00f3n y promover la reutilizaci\u00f3n de componentes UI.</p> </li> <li> <p>Contiene:</p> <ul> <li><code>/widgets</code>: Widgets personalizados reutilizables (ej. <code>CustomButton</code>, <code>LoadingIndicator</code>).</li> <li><code>/styles</code>: Definiciones de temas, colores, fuentes.</li> <li><code>/helpers</code>: Funciones de ayuda generales (ej. <code>ValidationHelper</code>).</li> <li><code>/constants</code>: Constantes relacionadas con la UI o valores compartidos.</li> </ul> </li> <li> <p>Convenciones:</p> <ul> <li>Puede depender de <code>core</code>. No debe depender de ninguna <code>feature</code>.</li> </ul> </li> </ul>"},{"location":"guias/arquitectura-mobile/#13-capa-features-libfeatures","title":"1.3. Capa features (<code>/lib/features</code>)","text":"<p>Esta es la capa principal donde reside la l\u00f3gica de negocio modularizada. Cada <code>feature</code> (ej. <code>/lib/features/auth</code>) es una funcionalidad independiente que sigue la Clean Architecture internamente.</p> <ul> <li> <p>Prop\u00f3sito: Encapsular funcionalidades completas del negocio, permitiendo un desarrollo, prueba y mantenimiento aislados.</p> </li> <li> <p>Contiene: Cada <code>feature</code> tiene sus propias subcarpetas:</p> <ul> <li> <p><code>/application</code>:</p> <ul> <li>Prop\u00f3sito: M\u00f3dulo de inyecci\u00f3n de dependencias y orquestaci\u00f3n de alto nivel para la <code>feature</code>. Proporciona las instancias concretas de casos de uso y sus dependencias a la capa de <code>presentation</code>.</li> <li>Contiene: Archivos de configuraci\u00f3n de inyecci\u00f3n (ej. <code>auth_injector.dart</code>).</li> </ul> </li> <li> <p><code>/domain</code>:</p> <ul> <li>Prop\u00f3sito: El coraz\u00f3n de la <code>feature</code>. Contiene la l\u00f3gica de negocio pura, incluyendo los Casos de Uso.</li> <li>Contiene: <code>/entities</code>, <code>/value_objects</code>, <code>/repositories</code> (Interfaces), <code>/use_cases</code>, <code>/exceptions</code> (de negocio).</li> <li>Convenciones: No debe depender de ninguna otra capa de la feature (data, presentation). Puede depender de core/errors.</li> </ul> </li> <li> <p><code>/data</code>:</p> <ul> <li>Prop\u00f3sito: Implementa los contratos (interfaces) del Dominio, manejando la entrada y salida de datos (APIs, bases de datos locales).</li> <li>Contiene: <code>/repositories</code> (Implementaciones concretas), <code>/data_sources</code> o <code>/api_clients</code> (usan Dio), <code>/dtos</code>, <code>/adapters</code> o <code>/mappers</code>.</li> <li>Convenciones: Solo debe depender de la capa <code>domain</code> de su <code>feature</code> y de la capa <code>core</code>.</li> </ul> </li> <li> <p><code>/presentation</code>:</p> <ul> <li>Prop\u00f3sito: Contiene la interfaz de usuario.</li> <li>Contiene: <code>/pages</code>, <code>/widgets</code> (espec\u00edficos de la feature), <code>/view_models</code> (<code>ChangeNotifier</code> de Provider).</li> <li>Convenciones: Solo debe depender de la capa <code>application</code> de su <code>feature</code> y de la capa <code>shared</code>.</li> </ul> </li> </ul> </li> <li> <p>Convenciones Generales de <code>features</code>:</p> <ul> <li>Cada <code>feature</code> es un m\u00f3dulo aut\u00f3nomo. Las dependencias internas siguen: <code>Presentation</code> -&gt; <code>Application</code> -&gt; <code>Domain</code> &lt;- <code>Data</code>.</li> <li>Puede depender de <code>core</code> y <code>shared</code>. No debe depender directamente de otras <code>features</code>.</li> </ul> </li> </ul>"},{"location":"guias/arquitectura-mobile/#2-flujo-de-comunicacion-y-gestion-de-dependencias","title":"2. Flujo de Comunicaci\u00f3n y Gesti\u00f3n de Dependencias","text":""},{"location":"guias/arquitectura-mobile/#21-flujo-de-datos-una-via","title":"2.1. Flujo de Datos (Una V\u00eda)","text":"<ol> <li>Vista (Feature/Presentation): Evento de UI.</li> <li>View Model (Feature/Presentation): Invoca el Caso de Uso de <code>feature/domain/use_cases</code>.</li> <li>Caso de Uso (Feature/Domain): Ejecuta l\u00f3gica de negocio, utiliza interfaces de Repositorio de <code>feature/domain/repositories</code>.</li> <li>Repositorio (Feature/Domain - Interfaz): Llama a un m\u00e9todo definido en la interfaz del <code>Repository</code>.</li> <li>Implementaci\u00f3n del Repositorio (Feature/Data): Realiza la operaci\u00f3n real (ej. llamada a API con Dio), maneja DTOs de <code>feature/data/dtos</code> y los mapea a las Entidades de Dominio.</li> <li>Dominio (Feature/Domain): Entidades aplican reglas de negocio puras.</li> <li>Retorno: El resultado se propaga al ViewModel.</li> <li>View Model: Actualiza su estado interno y notifica a sus oyentes (<code>notifyListeners()</code>).</li> <li>Vista: Se reconstruye para reflejar el nuevo estado.</li> </ol>"},{"location":"guias/arquitectura-mobile/#22-inyeccion-de-dependencias-capa-de-aplicacion","title":"2.2. inyecci\u00f3n de Dependencias (Capa de Aplicaci\u00f3n)","text":"<p>La capa de Aplicaci\u00f3n es clave para la Inversi\u00f3n de Dependencias (DIP), configurando y proporcionando las dependencias concretas.</p> <ul> <li>Configuraci\u00f3n centralizada en <code>main.dart</code> o <code>app_router.dart</code>:</li> </ul> <pre><code>MultiProvider(\n  providers: [\n    // Dependencias Core/Globales\n    Provider&lt;Dio&gt;(create: (_) =&gt; DioConfig.createDio()),\n\n    // Feature: Auth Dependencies (Data -&gt; Domain -&gt; Presentation)\n    Provider&lt;AuthApiClient&gt;(create: (context) =&gt; AuthApiClient(context.read&lt;Dio&gt;())),\n    Provider&lt;UserRepository&gt;(create: (context) =&gt; UserRepositoryImpl(context.read&lt;AuthApiClient&gt;())),\n    Provider&lt;SignInUserUseCase&gt;(create: (context) =&gt; SignInUserUseCase(context.read&lt;UserRepository&gt;())),\n    ChangeNotifierProvider&lt;AuthViewModel&gt;(create: (context) =&gt; AuthViewModel(context.read&lt;SignInUserUseCase&gt;())),\n  ],\n  child: MyApp(),\n);\n</code></pre> <ul> <li>Inyecci\u00f3n en Constructores: Todas las clases reciben sus dependencias a trav\u00e9s de sus constructores.</li> </ul> <pre><code>// Ejemplo: Caso de Uso recibiendo un Repositorio (Interfaz)\nclass SignInUserUseCase {\n  final UserRepository _userRepository;\n  SignInUserUseCase(this._userRepository);\n  // ...\n}\n</code></pre>"},{"location":"guias/arquitectura-mobile/#3-manejo-de-datos-dtos-y-adaptadores-en-la-capa-data","title":"3. Manejo de Datos: DTOs y Adaptadores en la Capa <code>data</code>","text":""},{"location":"guias/arquitectura-mobile/#31-data-transfer-objects-dtos","title":"3.1. Data Transfer Objects (DTOs)","text":"<p>Los DTOs son clases simples e inmutables, para transferir datos entre las capas. Se ubican en <code>/lib/features/[feature]/data/dtos.</code></p> <ul> <li>Implementaci\u00f3n: Se crear\u00e1n manualmente, incluyendo m\u00e9todos como <code>fromJson</code> y <code>toJson</code> para la serializaci\u00f3n/deserializaci\u00f3n, o m\u00e9todos de mapeo directo si la comunicaci\u00f3n no es JSON.</li> </ul> <pre><code>// Ejemplo: AuthRequestDto\nclass AuthRequestDto {\n  final String email;\n  final String password;\n  AuthRequestDto({required this.email, required this.password});\n  Map&lt;String, dynamic&gt; toJson() =&gt; {'email': email, 'password': password};\n}\n\n// Ejemplo: AuthResponseDto\nclass AuthResponseDto {\n  final String token;\n  final String userId;\n  AuthResponseDto({required this.token, required this.userId});\n  factory AuthResponseDto.fromJson(Map&lt;String, dynamic&gt; json) {\n    return AuthResponseDto(token: json['token'], userId: json['user_id']);\n  }\n}\n</code></pre>"},{"location":"guias/arquitectura-mobile/#32-adaptadores-mapeadores-en-la-capa-data","title":"3.2. Adaptadores (Mapeadores) en la capa <code>data</code>","text":"<p>Transforman datos entre DTOs y entidades de dominio.</p> <ul> <li> <p>Prop\u00f3sito: Mapear los DTOs de <code>data</code> (ej. <code>AuthResponseDto</code>) a las Entidades de Dominio (ej. <code>User</code>) y viceversa.</p> </li> <li> <p>Ubicaci\u00f3n: Como m\u00e9todos dentro de los DTOs, como extensiones, o en clases <code>Mapper</code> dedicadas en <code>/lib/features/[feature]/data/mappers</code>.</p> </li> </ul> <pre><code>// Ejemplo: M\u00e9todo de mapeo en AuthResponseDto\nclass AuthResponseDto {\n  // ... propiedades y fromJson\n  User toDomainEntity() {\n    return User(id: userId, token: token); // Mapeo a Entidad de Dominio\n  }\n}\n\n// Uso en la Implementaci\u00f3n del Repositorio:\nclass UserRepositoryImpl implements UserRepository {\n  // ...\n  Future&lt;User&gt; signIn(String email, String password) async {\n    final requestDto = AuthRequestDto(email: email, password: password);\n    final responseDto = await _authApiClient.signIn(requestDto);\n    return responseDto.toDomainEntity(); // Usa el m\u00e9todo de mapeo\n  }\n}\n</code></pre>"},{"location":"guias/arquitectura-mobile/#4-comunicacion-con-apis-dio","title":"4. Comunicaci\u00f3n con APIs: Dio","text":"<p>Dio es nuestro cliente HTTP principal, configurado globalmente en la capa <code>core</code> y utilizado por los <code>ApiClients</code> en la capa <code>data</code>.</p>"},{"location":"guias/arquitectura-mobile/#41-configuracion-global-de-dio","title":"4.1. Configuraci\u00f3n Global de Dio","text":"<ul> <li> <p>La instancia de Dio se crea y configura en <code>lib/core/network/dio_config.dart</code>.</p> </li> <li> <p>Incluye <code>BaseOptions</code>, <code>LogInterceptor</code>, y <code>InterceptorsWrapper</code> para l\u00f3gica transversal (autenticaci\u00f3n, manejo de errores HTTP gen\u00e9ricos).</p> </li> </ul> <pre><code>// lib/core/network/dio_config.dart\nclass DioConfig {\n  static Dio createDio() {\n    final dio = Dio(BaseOptions( /* ... */ ));\n    dio.interceptors.add(LogInterceptor( /* ... */ ));\n    dio.interceptors.add(InterceptorsWrapper(\n      onRequest: (options, handler) async { /* A\u00f1adir tokens */ return handler.next(options); },\n      onError: (e, handler) async { /* Manejo 401, etc. */ return handler.next(e); },\n    ));\n    return dio;\n  }\n}\n</code></pre>"},{"location":"guias/arquitectura-mobile/#42-clientes-de-api-en-la-capa-data","title":"4.2. Clientes de API (en la capa <code>data</code>)","text":"<ul> <li> <p>Clases dedicadas en <code>/lib/features/[feature]/data/data_sources</code> que exponen m\u00e9todos para cada endpoint de la API.</p> </li> <li> <p>Reciben la instancia de <code>Dio</code> global.</p> </li> <li> <p>Manejan la llamada HTTP y devuelven los DTOs de <code>data</code>.</p> </li> </ul> <pre><code>// lib/features/auth/data/data_sources/auth_api_client.dart\nclass AuthApiClient {\n  final Dio _dio;\n  AuthApiClient(this._dio);\n  Future&lt;AuthResponseDto&gt; signIn(AuthRequestDto requestDto) async {\n    try {\n      final response = await _dio.post('/auth/login', data: requestDto.toJson());\n      return AuthResponseDto.fromJson(response.data);\n    } on DioException {\n      rethrow; // Relanzar para que el Repositorio la capture\n    }\n  }\n}\n</code></pre>"},{"location":"guias/arquitectura-mobile/#5-manejo-de-errores","title":"5. Manejo de errores","text":"<p>Un manejo de errores consistente a trav\u00e9s de las capas es fundamental.</p>"},{"location":"guias/arquitectura-mobile/#51-clases-de-fallo-base-coreerrors","title":"5.1. Clases de Fallo Base (<code>core/errors</code>)","text":"<ul> <li>Define una jerarqu\u00eda de clases de <code>Failure</code> en <code>/lib/core/errors</code> para fallos t\u00e9cnicos o del sistema (ej. <code>ServerFailure</code>, <code>NetworkFailure</code>).</li> </ul> <pre><code>// lib/core/errors/failures.dart\nabstract class Failure { /* ... */ }\nclass ServerFailure extends Failure { /* ... */ }\nclass NetworkFailure extends Failure { /* ... */ }\n</code></pre>"},{"location":"guias/arquitectura-mobile/#52-excepciones-de-dominio-featuresfeaturedomainexceptions","title":"5.2. Excepciones de Dominio (<code>features/[feature]/domain/exceptions</code>)","text":"<ul> <li>Se definen por cada <code>feature</code> para representar errores de negocio puros (ej. <code>InvalidCredentialsException</code>, <code>UserNotFoundException</code>).</li> </ul> <pre><code>// lib/features/auth/domain/exceptions/auth_exceptions.dart\nabstract class AuthException implements Exception { /* ... */ }\nclass InvalidCredentialsException extends AuthException { /* ... */ }\n</code></pre>"},{"location":"guias/arquitectura-mobile/#53-mapeo-y-propagacion-de-errores","title":"5.3. Mapeo y Propagaci\u00f3n de Errores","text":"<p>El mapeo de errores es un proceso de dos pasos crucial:</p> <ul> <li> <p>Capa <code>data</code> (<code>features/[feature]/data/repositories</code>):</p> <ul> <li> <p>Captura <code>DioException</code> y otras excepciones de bajo nivel.</p> </li> <li> <p>Mapea estas excepciones a las Excepciones de Dominio o a los <code>Failure</code> gen\u00e9ricos de <code>core</code>.</p> </li> <li> <p>Luego, la excepci\u00f3n/fallo se relanza.</p> </li> </ul> </li> </ul> <pre><code>// Dentro de UserRepositoryImpl.signIn\n} on DioException catch (e) {\n  if (e.response?.statusCode == 400) throw InvalidCredentialsException('Credenciales inv\u00e1lidas.');\n  else if (e.type == DioExceptionType.connectionTimeout) throw NetworkFailure();\n  else throw ServerFailure(); // u otro Failure m\u00e1s gen\u00e9rico\n} catch (e) {\n  throw Failure(message: 'Error desconocido en datos: ${e.toString()}');\n}\n</code></pre> <ul> <li> <p>Capa <code>domain</code> (<code>features/[feature]/domain/use_cases</code>):</p> <ul> <li>Los casos de uso simplemente relanzan las excepciones de Dominio o los <code>Failures</code> que les llegan.</li> </ul> </li> </ul> <pre><code>// Dentro de SignInUserUseCase.execute\n} on AuthException {\n  rethrow;\n} on Failure {\n  rethrow;\n} catch (e) {\n  throw Failure(message: 'Error inesperado en caso de uso: ${e.toString()}');\n}\n</code></pre> <ul> <li> <p>Capa <code>presentation</code> (<code>features/[feature]/presentation/view_models</code>):</p> <ul> <li> <p>Los ViewModel capturan las excepciones de Dominio y Failures.</p> </li> <li> <p>Traducen estos fallos en mensajes amigables para el usuario (_errorMessage) y actualizan el estado de la UI.</p> </li> </ul> </li> </ul> <pre><code>// Dentro de AuthViewModel.signIn\n} on InvalidCredentialsException catch (e) { _errorMessage = e.message; }\non NetworkFailure catch (e) { _errorMessage = e.message; }\non ServerFailure catch (e) { _errorMessage = e.message; }\n// ... otros catches\nfinally { _isLoading = false; notifyListeners(); }\n</code></pre>"},{"location":"guias/arquitectura-mobile/#54-presentacion-de-errores-en-la-ui","title":"5.4. Presentaci\u00f3n de Errores en la UI","text":"<ul> <li> <p>La Vista observa el <code>_errorMessage</code> del ViewModel y lo muestra usando componentes de <code>shared/widgets</code> (ej. <code>ErrorDialog</code>, <code>SnackBar</code>).</p> </li> <li> <p>El ViewModel debe limpiar el error (<code>clearError()</code>) despu\u00e9s de mostrarlo.</p> </li> </ul>"},{"location":"guias/arquitectura-mobile/#6-convenciones-generales-de-codigo","title":"6. Convenciones generales de c\u00f3digo","text":"<ul> <li> <p>Nomenclatura:</p> <ul> <li> <p>Archivos y directorios: <code>snake_case</code>.</p> </li> <li> <p>Clases/Enums/Typedefs: <code>PascalCase</code>.</p> </li> <li> <p>M\u00e9todos/Variables: <code>camelCase</code>.</p> </li> <li> <p>Constantes: <code>SCREAMING_SNAKE_CASE</code> (globales est\u00e1ticas), <code>camelCase</code> con const.</p> </li> </ul> </li> <li> <p>Comentarios y Documentaci\u00f3n: Documentar clases, m\u00e9todos y propiedades p\u00fablicas con comentarios DART (<code>///.</code>)</p> </li> <li> <p>Inmutabilidad: Preferir objetos inmutables, especialmente en las capas de Dominio y en los DTOs. Considerar freezed para clases inmutables y copyWith.</p> </li> </ul>"},{"location":"proyectos/alfabetizacion/","title":"\ud83d\udcda Sistema de Alfabetizaci\u00f3n Interactiva","text":"<p>Este sistema est\u00e1 dise\u00f1ado para apoyar el proceso de alfabetizaci\u00f3n de estudiantes que a\u00fan no saben leer ni escribir. A trav\u00e9s de una aplicaci\u00f3n m\u00f3vil intuitiva, el estudiante interact\u00faa directamente con el sistema, mientras que el alfabetizador gu\u00eda el proceso educativo.</p>"},{"location":"proyectos/alfabetizacion/#objetivo","title":"\ud83c\udfaf Objetivo","text":"<p>Optimizar el proceso de ense\u00f1anza-aprendizaje en alfabetizaci\u00f3n, mediante la personalizaci\u00f3n de ejercicios que refuercen las habilidades del estudiante, garantizando un avance progresivo y adaptativo.</p>"},{"location":"proyectos/alfabetizacion/#como-funciona","title":"\ud83d\udc68\u200d\ud83c\udfeb \u00bfC\u00f3mo Funciona?","text":""},{"location":"proyectos/alfabetizacion/#1-evaluacion-inicial","title":"1. Evaluaci\u00f3n Inicial","text":"<p>El maestro alfabetizador ayuda al registro del alumno.</p>"},{"location":"proyectos/alfabetizacion/#2-generacion-de-recomendaciones","title":"2. Generaci\u00f3n de Recomendaciones","text":"<p>A partir de los resultados, el sistema utiliza algoritmos gen\u00e9ticos para seleccionar ejercicios adecuados al nivel del alumno.</p>"},{"location":"proyectos/alfabetizacion/#3-retroalimentacion-continua","title":"3. Retroalimentaci\u00f3n Continua","text":"<p>Con cada ejercicio realizado, el sistema reeval\u00faa el desempe\u00f1o y reajusta autom\u00e1ticamente las futuras recomendaciones.</p>"},{"location":"proyectos/alfabetizacion/#4-ciclo-adaptativo","title":"4. Ciclo Adaptativo","text":"<p>Este proceso se repite de forma continua, permitiendo un aprendizaje guiado y eficiente.</p> <p></p>"},{"location":"proyectos/alfabetizacion/#requerimientos","title":"\ud83d\udccc Requerimientos","text":"<ul> <li>Figma </li> </ul>"},{"location":"proyectos/alfabetizacion/#interaccion-de-usuario-y-diseno","title":"\ud83d\udda5\ufe0f Interacci\u00f3n de usuario y dise\u00f1o","text":"<ul> <li> <p>Arquitectura cloud </p> </li> <li> <p>Arquitectura de la informaci\u00f3n </p> </li> </ul>"},{"location":"proyectos/alfabetizacion/#base-de-datos","title":"\ud83e\uddd1\u200d\ud83d\udcbb Base de datos","text":""},{"location":"proyectos/alfabetizacion/#tablas","title":"Tablas","text":"<p>En este apartado se listan las tablas que conforman el esquema de la base de datos, detallando cada una a partir de un diccionario de datos, para comprender el prop\u00f3sito y atributos de cada tabla.</p>"},{"location":"proyectos/alfabetizacion/#relacionando-a-personas","title":"Relacionando a personas","text":"<p>Contiene las opciones registradas para denotar el tipo de vialidad de una direcci\u00f3n domiciliaria.</p>"},{"location":"proyectos/alfabetizacion/#tabla-tipo_vialidad","title":"Tabla: Tipo_Vialidad","text":"<p>Contiene las opciones registradas para denotar el tipo de vialidad de una direcci\u00f3n domiciliaria.</p> Campo Tipo Restricciones Descripci\u00f3n ID_Tipo_Vialidad Int PRIMARY KEY, INCREMENTAL Identificador \u00fanico del tipo de vialidad Nombre Varchar(64) Nombre del tipo de vialidad"},{"location":"proyectos/alfabetizacion/#tabla-tipo_asentamiento","title":"Tabla: Tipo_Asentamiento","text":"<p>Contiene las opciones registradas para denotar el tipo de asentamiento de una direcci\u00f3n domiciliaria</p> Campo Tipo Restricciones Descripci\u00f3n ID_Tipo_Asentamiento Int PRIMARY KEY, INCREMENTAL Identificador \u00fanico del tipo de asentamiento Nombre Varchar(64) Nombre del tipo de asentamiento"},{"location":"proyectos/alfabetizacion/#tabla-persona","title":"Tabla: Persona","text":"<p>Contiene toda la informaci\u00f3n relevante de identificaci\u00f3n de las personas involucradas en el sistema.</p> Campo Tipo Restricciones Descripci\u00f3n ID_Persona Int PRIMARY KEY, INCREMENTAL Identificador \u00fanico de la persona Nombre_Completo Varchar(32) Nombre completo de la persona Apellido_Paterno Varchar(32) Apellido paterno de la persona Apellido_Materno Varchar(32) Apellido materno de la persona CURP Varchar(18) D\u00edgitos que conforman el CURP de la persona N\u00famero_INE Varchar(13) D\u00edgitos que conforman el n\u00famero de INE de la persona Fecha_Nacimiento Date Fecha de nacimiento de la persona Genero Enum(\"M\",\"F\") G\u00e9nero de la persona Codigo_Postal Varchar(5) C\u00f3digo de oficina de la localidad de la persona Estado Varchar(100) Estado de residencia de la persona Municipio Varchar(100) Municipio de residencia de la persona Localidad Varchar(100) Localidad de residencia de la persona Vialidad_Nombre Varchar(100) Nombre de la vialidad de residencia de la persona Vialidad_Tipo Int FOREIGN KEY (Tipo_Vialidad.ID_Tipo_Vialidad) Tipo de vialidad de asentamiento de residencia Asentamiento Varchar(100) Nombre del asentamiento de residencia de la persona Asentamiento_Tipo Int FOREIGN KEY (Tipo_Asentamiento.ID_Tipo_Asentamiento) Tipo de asentamiento de residencia de la persona"},{"location":"proyectos/alfabetizacion/#tabla-institucion","title":"Tabla: Institucion","text":"<p>El cat\u00e1logo de las instituciones registradas en el sistema.</p> Campo Tipo Restricciones Descripci\u00f3n ID_Institucion Int PRIMARY KEY, INCREMENTAL Identificador \u00fanico de la instituci\u00f3n Nombre_completo Varchar(64) Nombre de la instituci\u00f3n"},{"location":"proyectos/alfabetizacion/#tabla-rol","title":"Tabla: Rol","text":"<p>Lista de los roles contemplados para el sistema.</p> Campo Tipo Restricciones Descripci\u00f3n ID_Rol Int PRIMARY KEY, INCREMENTAL Identificador \u00fanico del rol Nombre Varchar(64) Nombre del rol"},{"location":"proyectos/alfabetizacion/#tabla-horarios_disponibles","title":"Tabla: Horarios_disponibles","text":"<p>Lista de los horarios disponibles registrados para las personas involucradas.  </p> Campo Tipo Restricciones Descripci\u00f3n ID_Horarios_Disponibles Int PRIMARY KEY, INCREMENTAL Identificador \u00fanico del horario Dia Enum (D\u00edas de la semana) D\u00eda de la semana Hora Time Hora"},{"location":"proyectos/alfabetizacion/#tabla-persona_rol_horarios","title":"Tabla: Persona_Rol_Horarios","text":"<p>Contiene el registro de los horarios disponibles de las personas, delimitando el horario a un rol correspondiente.</p> Campo Tipo Restricciones Descripci\u00f3n ID_Persona Int UNIQUE Identificador de la persona ID_Horarios_Disponibles Int UNIQUE Identificador del horario ID_Rol Int Identificador del rol"},{"location":"proyectos/alfabetizacion/#tabla-celula","title":"Tabla: Celula","text":"<p>Contiene la informaci\u00f3n correspondiente a las c\u00e9lulas (grupos) formadas por las instituciones.</p> Campo Tipo Restricciones Descripci\u00f3n ID_Celula Int PRIMARY KEY, INCREMENTAL Identificador \u00fanico de la c\u00e9lula ID_Institucion Int FOREIGN KEY (Institucion.ID_Institucion) Identificador de la instituci\u00f3n autora ID_Persona Int FOREIGN KEY (Persona.ID_Persona) Identificador de la persona responsable (PVBS) Fecha_Inicio Date Fecha de inicio de la c\u00e9lula Fecha_Final Date Fecha de finalizaci\u00f3n de la c\u00e9lula"},{"location":"proyectos/alfabetizacion/#tabla-celula_educador","title":"Tabla: Celula_Educador","text":"<p>Contiene el registro de la pertenencia de los educadores a sus respectivas c\u00e9lulas.</p> Campo Tipo Restricciones Descripci\u00f3n ID_Persona Int PRIMARY KEY, INCREMENTAL Identificador \u00fanico del educador ID_Celula Int FOREIGN KEY (Celula.ID_Celula) Identificador de la c\u00e9lula"},{"location":"proyectos/alfabetizacion/#tabla-educando","title":"Tabla: Educando","text":"<p>Registro de la informaci\u00f3n de las personas que formar\u00e1n parte de los educandos del programa de alfabetizaci\u00f3n.</p> Campo Tipo Restricciones Descripci\u00f3n ID_Educando Int INCREMENTAL Identificador \u00fanico del educando ID_Persona Int PRIMARY KEY Identificador de la persona ID_Educador Int DEFAULT NULL Identificador del educador asignado QR_Ruta Varchar(100) Ruta que redirecciona al QR generado"},{"location":"proyectos/alfabetizacion/#relacionando-a-ejercicios","title":"Relacionando a Ejercicios","text":""},{"location":"proyectos/alfabetizacion/#tabla-unidad","title":"Tabla: Unidad","text":"<p>Contiene el cat\u00e1logo registrado de las unidades, es decir, las agrupaciones de los temas. </p> Campo Tipo Restricciones Descripci\u00f3n ID_Unidad Int PRIMARY KEY, INCREMENTAL Identificador \u00fanico de la unidad Nombre Int Nombre de la unidad"},{"location":"proyectos/alfabetizacion/#tabla-habilidad","title":"Tabla: Habilidad","text":"<p>Contiene el listado de todas las habilidades que se abordar\u00e1n en el sistema de alfabetizaci\u00f3n.</p> Campo Tipo Restricciones Descripci\u00f3n ID_Habilidad Int PRIMARY KEY, INCREMENTAL Identificador \u00fanico de la habilidad Nombre Int Nombre de la habilidad"},{"location":"proyectos/alfabetizacion/#tabla-tema","title":"Tabla: Tema","text":"<p>Contiene el listado de todos los temas que se abordar\u00e1n en el sistema de alfabetizaci\u00f3n.</p> Campo Tipo Restricciones Descripci\u00f3n ID_Tema Int PRIMARY KEY, INCREMENTAL Identificador \u00fanico del tema Nombre Int Nombre del tema"},{"location":"proyectos/alfabetizacion/#tabla-secuencia_temas","title":"Tabla: Secuencia_Temas","text":"<p>Registro de la secuencia que deben seguir los temas, trazando la ruta entre los temas.</p> Campo Tipo Restricciones Descripci\u00f3n ID_Tema Int FOREIGN KEY (Tema.ID_Tema), UNIQUE Identificador \u00fanico del tema actual ID_Tema_Siguiente Int FOREIGN KEY (Tema.ID_Tema), UNIQUE Identificador \u00fanico del tema siguiente"},{"location":"proyectos/alfabetizacion/#tabla-reactivo","title":"**Tabla: Reactivo **","text":"<p>Contiene toda la informaci\u00f3n de las plantillas de las cuales surgieran los ejercicios, entend\u00e1moslo como la base para la generaci\u00f3n de diversos ejercicios.</p> Campo Tipo Restricciones Descripci\u00f3n ID_Reactivo Int PRIMARY KEY, INCREMENTAL Identificador \u00fanico del reactivo Titulo Varchar(64) Titulo del reactivo Subtitulo Varchar(64) Subtitulo del reactivo Contenido Text Descripci\u00f3n del reactivo Tiempo_Sugerido Time Tiempo sugerido para los ejercicios generados ID_Tema Int FOREIGN KEY (Tema.ID_Tema) Pertenencia a un tema"},{"location":"proyectos/alfabetizacion/#tabla-reactivo_habilidades","title":"Tabla: Reactivo_Habilidades","text":"<p>Mapeado de las habilidades que aborda un reactivo, es decir, que habilidades se utilizar\u00e1n en la resoluci\u00f3n de los ejercicios derivados de la plantilla.</p> Campo Tipo Restricciones Descripci\u00f3n ID_Reactivo Int Identificador \u00fanico del reactivo ID_Habilidad Int Identificador \u00fanico de la habilidad Cobertura Float Medida en la que se aborda la habilidad del 0 a 1"},{"location":"proyectos/alfabetizacion/#tabla-tipo_ejercicio","title":"Tabla: Tipo_Ejercicio","text":"<p>Contiene el listado de tipos de los ejercicios definidos para el sistema de alfabetizaci\u00f3n.</p> Campo Tipo Restricciones Descripci\u00f3n ID_Tipo_Ejercicio Int PRIMARY KEY, INCREMENTAL Identificador \u00fanico del tipo de ejercicio Nombre Varchar(64) Nombre del tipo de ejercicio"},{"location":"proyectos/alfabetizacion/#tabla-ejercicio_tipos","title":"Tabla: Ejercicio_Tipos","text":"<p>Contiene el mapeo de los tipos de cada ejercicio.</p> Campo Tipo Restricciones Descripci\u00f3n ID_Tipo_Ejercicio Int Identificador \u00fanico del tipo de ejercicio ID_Ejericicio Int Identificador \u00fanico del ejercicio"},{"location":"proyectos/alfabetizacion/#tabla-ejercicio","title":"Tabla: Ejercicio","text":"<p>Contiene las instancias de los reactivos, es decir, los ejercicios derivados de las plantillas denominadas reactivos.</p> Campo Tipo Restricciones Descripci\u00f3n ID_Ejercicio Int Identificador \u00fanico del ejercicio ID_Reactivo Int Identificador \u00fanico del reactivo Instrucciones Text Pasos para la resoluci\u00f3n del ejercicio Rutas_Imagenes Array Listado de las im\u00e1genes necesarias Contexto Object Detalles extras correspondientes al ejercicio"},{"location":"proyectos/alfabetizacion/#relacionando-a-educandos-y-ejercicios","title":"Relacionando a Educandos y Ejercicios","text":""},{"location":"proyectos/alfabetizacion/#tabla-educando_ejercicios","title":"Tabla: Educando_Ejercicios","text":"<p>Contiene el listado de los ejercicios realizados por los educandos, llevando un registro de los detalles de la entrega.</p> Campo Tipo Restricciones Descripci\u00f3n ID_Educando_Ejercicio Int PRIMARY KEY, INCREMENTAL Identificador \u00fanico de la entrega realizada ID_Educando Int Identificador \u00fanico del educando ID_Ejercicio Int Identificador \u00fanico del ejercicio Fecha_Asignacion Datetime Fecha en la que se le asign\u00f3 al educando Fecha_Completado Datetime Fecha de entrega del educando"},{"location":"proyectos/alfabetizacion/#tabla-educando_ejercicio_habilidades","title":"Tabla: Educando_Ejercicio_Habilidades","text":"<p>Contiene el mapeo del puntaje obtenido por el educando en las habilidades abordadas por el ejercicio.</p> Campo Tipo Restricciones Descripci\u00f3n ID_Educando_Ejercicio Int FOREIGN KEY (Educando_Ejercicios.ID_Educando_Ejercicio) Identificador \u00fanico de la entrega realizada por el educando ID_Habilidad Int Identificador \u00fanico de la habilidad Puntaje Int Puntaje obtenido por el educando en la habilidad"},{"location":"proyectos/alfabetizacion/#relaciones","title":"Relaciones","text":"<p>En este apartado se describen las relaciones primordiales definidas entre las entidades definidas en el anterior apartado \u201cTablas\u201d. En cada relaci\u00f3n se hace menci\u00f3n de las entidades consideradas y en que tabla observamos la relaci\u00f3n. </p>"},{"location":"proyectos/alfabetizacion/#entidad-persona","title":"Entidad: Persona","text":"<ol> <li> <p>Una persona tiene un tipo de vialidad para su direcci\u00f3n domiciliaria. Tabla: Persona.</p> </li> <li> <p>Una persona tiene un tipo de asentamiento para su direcci\u00f3n domiciliaria. Tabla: Persona.</p> </li> <li> <p>Una persona puede tener m\u00faltiples horarios disponibles, cada horario definido para un rol ejercido por la persona. Tabla: Personal_Rol_Horarios.</p> </li> <li> <p>Una persona puede ejercer el rol de educador asignado a un educando. Tabla: Personal_Rol_Horarios, Educando.</p> </li> <li> <p>Una persona puede ejercer el rol de educando. Tabla: Educando.</p> </li> </ol>"},{"location":"proyectos/alfabetizacion/#entidad-celula","title":"Entidad: Celula","text":"<ol> <li> <p>Una c\u00e9lula pertenece a una instituci\u00f3n. Tabla: Celula.</p> </li> <li> <p>Una persona puede ejercer el rol de encargado de una c\u00e9lula, es decir, como PVBS. Tabla: Celula.</p> </li> <li> <p>Una persona que ejerce el rol de educador puede pertenecer a una c\u00e9lula en especifico. Tabla: Celula_Educador.</p> </li> </ol>"},{"location":"proyectos/alfabetizacion/#entidad-tema","title":"Entidad: Tema","text":"<ol> <li> <p>Un tema pertenece a una unidad. Tabla: Tema.</p> </li> <li> <p>Un tema da paso a uno o m\u00e1s temas. Tabla: Secuencia_Temas.</p> </li> </ol>"},{"location":"proyectos/alfabetizacion/#entidad-reactivo","title":"Entidad: Reactivo","text":"<ol> <li> <p>Un reactivo pertenece a un tema. Tabla: Reactivo.</p> </li> <li> <p>Un reactivo aborda uno o m\u00e1s habilidades. Tabla: Reactivo_Habilidades.</p> </li> </ol>"},{"location":"proyectos/alfabetizacion/#entidad-ejercicio","title":"Entidad: Ejercicio","text":"<ol> <li> <p>Un ejercicio es derivado de un reactivo. Tabla: Ejercicio.</p> </li> <li> <p>Un ejercicio puede tener uno o muchos tipos de ejercicios. Tabla: Ejercicio_Tipos.</p> </li> </ol>"},{"location":"proyectos/alfabetizacion/#entidad-educando","title":"Entidad: Educando","text":"<ol> <li> <p>Un educando puede realizar ejercicios. Tabla: Educando_Ejercicios.</p> </li> <li> <p>Un educando puede ser evaluado a uno o muchas habilidades por ejercicios. Tabla: Educando_Ejercicio_Habilidades.</p> </li> </ol>"},{"location":"proyectos/alfabetizacion/#restricciones","title":"Restricciones","text":"<p>En este apartado se abordar\u00e1n las restricciones l\u00f3gicas conforme al dominio definido para el sistema de alfabetizaci\u00f3n.</p>"},{"location":"proyectos/alfabetizacion/#pvbs","title":"PVBS","text":"<ol> <li>Una persona no puede ser encargada de una c\u00e9lula, si esta no tiene al menos un horario disponible registrado con el rol de PVBS.</li> </ol>"},{"location":"proyectos/alfabetizacion/#educador","title":"Educador","text":"<ol> <li> <p>Una persona no puede ser asignada como educador a un alumno, si este no tiene al menos un horario disponible registrado con el rol de Educador.</p> </li> <li> <p>Una persona no puede ser registrada como educador de una c\u00e9lula, si no tiene al menos un horario disponible registrado con el rol de Educador.</p> </li> </ol>"},{"location":"proyectos/alfabetizacion/#temas","title":"Temas","text":"<ol> <li>Referente a la secuencialidad de los temas, se debe respetar la ruta trazada por la planeaci\u00f3n de los temas, sin romper dependencias entre los mismos.</li> </ol>"}]}